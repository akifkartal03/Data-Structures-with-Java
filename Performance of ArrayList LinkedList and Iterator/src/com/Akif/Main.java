package com.Akif;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

/***
 * This Main Class tests each method of the SimpleTextEditor class.
 * Measures the running time of SimpleTextEditor implementation for various text sizes.
 * Creates a readable log file of the test.
 */
public class Main {
    /***
     * Create a logger to create log messages and log file.
     */
    private final static Logger logger = Logger.getLogger(Main.class.getName());

    /***
     * Main method to test methods.
     * @param args
     */
    public static void main(String[] args) {
        //create a text to add other text when make testing...
        SimpleTextEditor addedText = new SimpleTextEditor (new ArrayList<> ());
        addedText.read ("abstractList.txt");
        //create a file handler and create a log file
        //set with simpleFormatter and add to logger as a handler.
        FileHandler fh;
        try {
            fh = new FileHandler("test.log");
            fh.setFormatter (new SimpleFormatter ());
            logger.addHandler (fh);
        }catch (Exception e){
            e.printStackTrace ();
        }
        // to measure time I used "System.nanoTime()" method with these variables.
        long startTime,endTime,duration;
        SimpleTextEditor simpleTextEditor; //create a simple textEditor object to test methods.
        //everything is clear here without extra comments.
        logger.log (Level.INFO,"Test Files: akif.txt(1 KB), vectors.txt(3 KB), listInterface.txt(6 KB)\n");
        logger.log (Level.OFF,"----------------------****TEST FOR ArrayList****------------------------------\n");
        logger.log (Level.OFF,"----------------------------akif.txt(normal)------------------------------------");
        logger.info ("Test for 'akif.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.read ("akif.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.warning ("Text: "+simpleTextEditor);
        logger.info ("Add abstractList.txt text to the text with start index 3");
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),3);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        logger.warning ("Text after add operation: "+simpleTextEditor);
        startTime = System.nanoTime();
        logger.warning ("find(ali): "+simpleTextEditor.find ("ali"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('a','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.warning ("replaceAll(a,k): "+simpleTextEditor);
        logger.log (Level.OFF,"-------------------------------akif.txt(iterator)------------------------------");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("akif.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.warning ("Text: "+simpleTextEditor);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),3);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        logger.warning ("Text after add operation: "+simpleTextEditor);
        startTime = System.nanoTime();
        logger.warning ("find(ali): "+simpleTextEditor.find ("ali"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('a','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.warning ("replaceAll(a,k): "+simpleTextEditor);
        logger.log (Level.OFF,"---------------------------vectors.txt(normal)----------------------------------");
        logger.info ("Test for 'vectors.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.read ("vectors.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.warning ("Text: "+simpleTextEditor);
        logger.info ("add abstractList.txt text to the text with start index 5");
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),5);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        logger.warning ("Text after add operation: "+simpleTextEditor);
        startTime = System.nanoTime();
        logger.warning ("find(dynamically): "+simpleTextEditor.find ("dynamically"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('i','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.info ("replaceAll(i,k): "+simpleTextEditor);
        logger.log (Level.OFF,"-------------------------------vectors.txt(iterator)----------------------------");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("vectors.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),5);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.findByIterator ("dynamically");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('i','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"------------------------listInterface.txt(normal)-------------------------------");
        logger.info ("Test for 'listInterface.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.read ("listInterface.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.info ("add abstractList.txt text to the text with start index 25");
        logger.warning ("Text: "+simpleTextEditor);
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),25);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        logger.warning ("Text after add operation: "+simpleTextEditor);
        startTime = System.nanoTime();
        logger.warning ("find(Shared pointer): "+simpleTextEditor.find ("Shared pointer"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('e','c');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.info ("replaceAll(e,c): "+simpleTextEditor);
        logger.log (Level.OFF,"-----------------------listInterface.txt(iterator)------------------------------");
        simpleTextEditor = new SimpleTextEditor (new ArrayList<>());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("listInterface.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),25);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.findByIterator ("Shared pointer");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('e','c');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"----------------------****SAME TEST FOR LinkedList****-----------------------------\n");
        logger.log (Level.OFF,"----------------------------akif.txt(normal)------------------------------------");
        logger.info ("Test for 'akif.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.read ("akif.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.info ("Read from akif.txt and construct the text.");
        logger.info ("Add abstractList.txt text to the text with start index 3");
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),3);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        logger.warning ("find(ali): "+simpleTextEditor.find ("ali"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('a','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"-------------------------------akif.txt(iterator)------------------------------");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("akif.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),3);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.findByIterator ("ali");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('a','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"---------------------------vectors.txt(normal)----------------------------------");
        logger.info ("Test for 'vectors.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.read ("vectors.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.info ("add 'linkedList' word to the text with start index 5");
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),5);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        logger.warning ("find(dynamically): "+simpleTextEditor.find ("dynamically"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('i','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"-------------------------------vectors.txt(iterator)----------------------------");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("vectors.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),5);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.findByIterator ("dynamically");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('i','k');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"------------------------listInterface.txt(normal)-------------------------------");
        logger.info ("Test for 'listInterface.txt' file without iterator");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.read ("listInterface.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        logger.info ("Read from listInterface.txt and add 'set and map' word to the text with start index 25");
        startTime = System.nanoTime();
        simpleTextEditor.add (addedText.toString (),25);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        logger.warning ("find(Shared pointer): "+simpleTextEditor.find ("Shared pointer"));
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAll ('e','c');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        logger.log (Level.OFF,"--------------------------listInterface.txt(iterator)---------------------------");
        simpleTextEditor = new SimpleTextEditor (new LinkedList<> ());
        startTime = System.nanoTime();
        simpleTextEditor.readByIterator ("listInterface.txt");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"read method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.addByIterator (addedText.toString (),25);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"add method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.findByIterator ("Shared pointer");
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"find method running time(millisecond): "+duration);
        startTime = System.nanoTime();
        simpleTextEditor.replaceAllByIterator ('e','c');
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        logger.log (Level.WARNING,"replace method running time(millisecond): "+duration);
        System.out.println ("***The 'test.log' file was created successfully in the same directory!***");
    }
}
